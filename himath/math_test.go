/*
Этот код демонстрирует, как тестировать функцию varianceGeneral, которая вычисляет дисперсию набора чисел.
Тесты включают различные сценарии: пустой входной слайс, слайс с одним элементом и слайс с несколькими элементами.
Использование функции floatEquals обеспечивает корректное сравнение чисел с плавающей точкой.
*/
package himath

import (
	"fmt"
	"github.com/cinar/indicator"
	"math"    // Используется для выполнения математических операций, таких как Abs
	"testing" // Пакет testing используется для написания и выполнения тестов в Go
)

// TestVariance проверяет корректность вычисления дисперсии по обобщенной формуле.
func TestVariance(t *testing.T) {
	// Определение тестовых случаев
	testCases := []struct {
		name     string    // Название тестового случая
		input    []float64 // Входной слайс чисел для которых будет вычислена дисперсия
		expected float64   // Ожидаемое значение дисперсии
	}{
		{"empty slice", []float64{}, 0},                      // Тест на пустой слайс
		{"single element", []float64{5}, 0},                  // Тест на слайс с одним элементом (дисперсия равна 0)
		{"multiple elements", []float64{1, 2, 3, 4, 5}, 2.5}, // Тест на слайс с несколькими элементами
	}

	// Перебор тестовых случаев
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Вызов функции varianceGeneral для входного слайса
			got := varianceGeneral(tc.input)
			// Проверка, равно ли полученное значение ожидаемому с учетом плавающей точности
			if !floatEquals(got, tc.expected) {
				t.Errorf("Variance(%v) = %v; want %v", tc.input, got, tc.expected)
			}
		})
	}
}

func TestCentralDerivative(t *testing.T) {
	// BTC 02 May 04:20 | 5
	closing := []float64{
		57506.5,
		57453.4,
		57439.9,
		57508.2,
		57460.4,
		57412.9,
		57513.3,
		57508.3,
		57443.9,
		57518.9,
		57545.5,
		57660.1,
		57544.6,
		57426.1,
		57424.1,
		57479.2,
		57506.8,
		57435.1,
		57444.9,
		57500.4,
		57357.9,
		57289.2,
		57219.8,
		57309.3,
		57318.2,
		57381.7,
		57337.7,
		57354.9,
		57358.1,
		57083,
		57163.5,
		57333,
		57142.9,
		56984.3,
		57272.1,
		57628.3,
		57720,
		57692.2,
		57797.7,
		57829.9,
		57832.4,
		57721.4,
		57666.2,
		57749.5,
		57691.1,
		57872,
		57942.1,
		58113.9,
		58118.3,
		58300.1,
		58216.1,
		58364.2,
		58541.5,
		58298.5,
		58218.7,
		58461.4,
		58332.9,
		58192,
		58028.7,
		57895.3,
		57961,
		57990.1,
		58018,
		57869.8,
		57868.7,
		57843.7,
		57934.7,
		57992.6,
		57969.8,
		58006,
		57959.6,
		57971.9,
		57902,
		57906.7,
		57952.6,
		58058,
		58113.2,
		57877.6,
		57909.6,
		57773,
		57801,
		57806.4,
		57859.3,
		58124.7,
		57833.9,
		57549.8,
		57431.7,
		57394.3,
		57416.2,
		57330,
		57484.5,
		57475.2,
		57384.8,
		57268.1,
		57421.8,
		57338.3,
		57243.8,
		57095.6,
		57091,
		57182.9,
		57101.9,
		56936.4,
		57217.9,
		57429.2,
		57490.7,
		57219.6,
		57178.1,
		58042,
		58294.3,
		58413.9,
		58538.7,
		58723,
		58803,
		58887.7,
		59418.2,
		58658.4,
		58690,
		58398,
		58414.4,
		57982,
		57698.3,
		57634.1,
		57830.2,
		57999.4,
		58043,
		57406.7,
		57571.9,
		57303.5,
		57182.8,
		57164.8,
		57212.8,
		57165.5,
		57033.8,
		56871.4,
		56754.2,
		56959,
		57031.4,
		57022.6,
		56983.9,
		57027.7,
		56995.8,
		57132.5,
		57205.6,
		57326.5,
		57144,
		57195.7,
		57005.2,
		56818.8,
		57000.2,
		56860.6,
		56875.5,
		56939.7,
		56957,
		56953.1,
		57107,
		57074.2,
		57059.1,
		56767.6,
		56944.6,
		57080.7,
		57327.7,
		57462.4,
		57427,
		57370.9,
		57438.6,
		57307.8,
		57500.2,
		57405.9,
		57370.5,
		57373,
		57242.9,
		57286.9,
		57277.5,
		57271.8,
		57273.3,
		57400.5,
		57496,
		57516,
		57343.9,
		57680,
		57701.6,
		57732.6,
		57834,
		57777,
		57803.7,
		57941.8,
		57845,
		58008.7,
		58105.2,
		58177.4,
		58156.2,
		58025.7,
		58028.5,
		57970,
		58193,
		57934.8,
		57747.2,
		57870.1,
		57857.5,
	}

	sma := indicator.Sma(130, closing)
	derivative := CentralDerivative(sma)

	for i, j := 10, 1000; i > 0; i, j = i-1, j+1000 {
		if i > 1 {
			//fmt.Printf("%f, ", sma[len(sma)-i])
			fmt.Printf("(%d, %f), ", j, sma[len(sma)-i])
		} else {
			//fmt.Printf("%f\n", sma[len(sma)-i])
			fmt.Printf("(%d, %f)\n", j, sma[len(sma)-i])
		}
	}

	fmt.Println("SMA:", sma)
	fmt.Println("Derivative of SMA:", derivative)

}

// floatEquals сравнивает два числа с плавающей точкой на равенство с учетом погрешности.
// Используется для учета неточности представления чисел с плавающей точкой.
func floatEquals(a, b float64) bool {
	return math.Abs(a-b) < 1e-9 // Погрешность меньше чем 1e-9 считается допустимой
}
